<h1>Carrito de Compras</h1>

{{#if cart.products.length}}
  <div class="cart-items">
    {{#each cart.products}}
      <div class="cart-item">
        <h3>{{this.product.title}}</h3>
        <p>Precio: ${{this.product.price}}</p>
        <p>Cantidad: {{this.quantity}}</p>
        <p>Subtotal: ${{multiply this.product.price this.quantity}}</p>
        
        <div class="item-actions">
          <form action="/api/carts/{{../cart._id}}/products/{{this.product._id}}" method="PUT" class="update-form">
            <input type="number" name="quantity" value="{{this.quantity}}" min="1" class="quantity-input">
            <button type="submit">Actualizar</button>
          </form>
          
          <form action="/api/carts/{{../cart._id}}/products/{{this.product._id}}" method="DELETE" class="delete-form">
            <button type="submit">Eliminar</button>
          </form>
        </div>
      </div>
    {{/each}}
  </div>
  
  <div class="cart-total">
    <h2>Total: ${{cart.calculateTotal}}</h2>
  </div>
  
  <div class="cart-actions">
    <form action="/api/carts/{{cart._id}}" method="DELETE">
      <button type="submit" class="btn-clear">Vaciar Carrito</button>
    </form>
  </div>
{{else}}
  <p>El carrito está vacío</p>
{{/if}}

<a href="/home">Seguir comprando</a>

<script>
  Handlebars.registerHelper('multiply', function(a, b) {
    return a * b;
  });
  
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.update-form').forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(form);
        const quantity = formData.get('quantity');
        
        try {
          const response = await fetch(form.action, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ quantity: parseInt(quantity) })
          });
          
          if (response.ok) {
            location.reload();
          } else {
            alert('Error al actualizar cantidad');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al actualizar cantidad');
        }
      });
    });
    
    document.querySelectorAll('.delete-form').forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        try {
          const response = await fetch(form.action, {
            method: 'DELETE'
          });
          
          if (response.ok) {
            location.reload();
          } else {
            alert('Error al eliminar producto');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al eliminar producto');
        }
      });
    });
  });
</script>

<style>
  .cart-items {
    margin: 20px 0;
  }
  
  .cart-item {
    border: 1px solid #ddd;
    padding: 15px;
    margin-bottom: 15px;
    border-radius: 8px;
  }
  
  .item-actions {
    margin-top: 10px;
    display: flex;
    gap: 10px;
    align-items: center;
  }
  
  .quantity-input {
    width: 60px;
    padding: 5px;
  }
  
  .cart-total {
    margin: 20px 0;
    padding: 15px;
    background-color: #f8f9fa;
    border-radius: 8px;
  }
  
  .btn-clear {
    background-color: #dc3545;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
</style>