<h1>Lista de Productos</h1>

{{#if products.length}}
  <div class="products-grid">
    {{#each products}}
      <div class="product-card">
        <h2>{{this.title}}</h2>
        <p>{{this.description}}</p>
        <p>Precio: ${{this.price}}</p>
        <p>Stock: {{this.stock}}</p>
        <p>Categoría: {{this.category}}</p>
        
        <div class="product-actions">
          <a href="/products/{{this._id}}" class="btn-details">Ver detalles</a>
          <button class="btn-add-cart" data-id="{{this._id}}">Agregar al carrito</button>
        </div>
      </div>
    {{/each}}
  </div>

  {{#if pagination}}
    <div class="pagination">
      {{#if pagination.hasPrevPage}}
        <a href="/home?page={{pagination.prevPage}}&limit={{pagination.limit}}{{#if pagination.query}}&query={{pagination.query}}{{/if}}{{#if pagination.sort}}&sort={{pagination.sort}}{{/if}}">Anterior</a>
      {{/if}}
      
      <span>Página {{pagination.page}} de {{pagination.totalPages}}</span>
      
      {{#if pagination.hasNextPage}}
        <a href="/home?page={{pagination.nextPage}}&limit={{pagination.limit}}{{#if pagination.query}}&query={{pagination.query}}{{/if}}{{#if pagination.sort}}&sort={{pagination.sort}}{{/if}}">Siguiente</a>
      {{/if}}
    </div>
  {{/if}}
{{else}}
  <p>No hay productos disponibles</p>
{{/if}}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Agregar productos al carrito
    document.querySelectorAll('.btn-add-cart').forEach(button => {
      button.addEventListener('click', async (e) => {
        const productId = e.target.getAttribute('data-id');
        
        try {
          // Aquí deberías tener el ID del carrito actual del usuario
          // Por ahora, usaremos un carrito temporal (podrías guardarlo en localStorage)
          let cartId = localStorage.getItem('currentCart');
          
          if (!cartId) {
            // Crear un nuevo carrito si no existe
            const response = await fetch('/api/carts', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            });
            
            const cart = await response.json();
            cartId = cart._id;
            localStorage.setItem('currentCart', cartId);
          }
          
          // Agregar producto al carrito
          const addResponse = await fetch(`/api/carts/${cartId}/product/${productId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ quantity: 1 })
          });
          
          if (addResponse.ok) {
            alert('Producto agregado al carrito');
          } else {
            alert('Error al agregar producto al carrito');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al agregar producto al carrito');
        }
      });
    });
  });
</script>

<style>
  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    margin: 20px 0;
  }
  
  .product-card {
    border: 1px solid #ddd;
    padding: 15px;
    border-radius: 8px;
  }
  
  .product-actions {
    margin-top: 15px;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .btn-details, .btn-add-cart {
    padding: 8px 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
  }
  
  .btn-details {
    background-color: #007bff;
    color: white;
  }
  
  .btn-add-cart {
    background-color: #28a745;
    color: white;
  }
  
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin-top: 30px;
  }
</style>